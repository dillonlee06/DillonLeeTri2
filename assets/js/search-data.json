{
  
    
        "post0": {
            "title": "Variables and Assignment in JavaScript",
            "content": "Numbers . // one way to assign a variable is using var _(variable name)_ = _(value)_; var x = 1; var y = 2; // one of the key points for the use of variables is the use of numbers which can help us with algebraic functions var z = x + y; console.log(z); . 3 . // another way to assign a variable is using const _(variable name)_ = _(value)_; const q = 5; const w = 6; let s = q + w; console.log(s); . 11 . Boolean . // Boolean is another key point for the use of variables Boolean(w &gt; q) // True false outputs . true . Boolean(w &lt; q) . false . String . // another type of data is a string which is just letters that form words let groupname = &quot;ZestyYeungs&quot;; // another way to assign a variable is using let _(variable name)_ = _(value)_; console.log(groupname); . ZestyYeungs . List . // another type of data is a list containing multiple data points const groupnames = [&quot;Dillon&quot;, &quot;Rohan&quot;, &quot;Adi&quot;, &quot;Tay&quot;]; console.log(groupnames); . [ &#39;Dillon&#39;, &#39;Rohan&#39;, &#39;Adi&#39;, &#39;Tay&#39; ] . // connects to data abstraction where data points can be pulled from lists const group = [ &quot;Dillon&quot;, &quot;Rohan&quot;, &quot;Adi&quot;, &quot;Tay&quot; ]; console.log(group); . [ &#39;Dillon&#39;, &#39;Rohan&#39;, &#39;Adi&#39;, &#39;Tay&#39; ] .",
            "url": "https://dillonlee06.github.io/ZestyYeungsReborn//ZestyYeungsReborn/2022/11/27/VariablesJavaScript.html",
            "relUrl": "/2022/11/27/VariablesJavaScript.html",
            "date": " • Nov 27, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Variables and Assignment Python",
            "content": "Variables . Represent a value with a variable Strings, lists, booleans, numbers | . | Determine the value of a variable as a result of an assignment | . Python . Defining Variables . To define a variable in python, just type in the variable name - one word - and use the = sign to set it equal to it&#39;s value. A variable can be defined using numbers, string, list, or boolean. Strings must have quotations around it and lists must be surrounded by square brackets. Once you have defined a variable, you can do many functions and conditions with it, including the print() statement. . #defining all the variables using the equal sign numbervariable = 25 stringvariable = &quot;word&quot; numberlist = [1, 2, 3, 4, 5] stringlist = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;] israining = False #printing all the defined variables print(numbervariable) print(stringvariable) print(numberlist) print(stringlist) print(israining) . Mathematical Expressions . Once a variable is defined using a numerical value, mathematical expressions can also be performed on the variable. . number = 5 #defining the variable number x = number * 2 #defining a variable by using another variable print(number*2) # multiplying a variable by 2 print(x) . Functions on Lists . Once a list is defined, many functions can be performed, such as the append() function. . list = [] list.append(&quot;cookies&quot;) # appending a value to a defined list print(list) . Dictionaries . A dictionary can also be defined using curly brackets and the equal sign. To input keys and values into a dictionary, you have to use a slightly different approach than lists. . mydict = {&quot;ice cream&quot;:&quot;dairy&quot;} # defining dictionary using curly brackets mydict[&quot;banana&quot;] = &quot;fruit&quot; #add keys and values to a dict by setting a value equal to a key, like shown mydict[&quot;ice cream&quot;] = &quot;dessert&quot; #editing a value inside the dictionary print(mydict) . Interchanging Variables . You can also interchange variables by using a temporary variable. In the code below, temp is the temporary variables, and var 1 and var 2 will have their values swapped. This code also works with integers, not just strings. . var1 = &quot;word&quot; # defining first variable var2 = &quot;number&quot; # defining second variable temp = var1 # defining temporary variable using the first variable var1 = var2 # changing the first variable value as the second variable value var2 = temp # changing the second variable value to the first variable value . Floats . Variables can also be defined using float data types, instead of just int types, but are used the exact same way. The same mathematical functions also apply. . number = 20.3 #defining a variable usinbg float x = number/10 #defining second variable y = number*2 # defining third variable print(number) # printing first variable print(x) #printing second variable print(y) # printing third variable print(x*y) #printing the second and third variables multiplied . Even Function . The function below takes in a parameter, x, and determines if x is even or odd. Variables can be used within functions to perform a certain task, which in this case, is to determine even or odd. To define a function, use the variable def and use a colon. Make sure there are parenthesis next to the function name, even if the function doesn&#39;t tkae in any parameters. . def IsEven(x): # define the function if x % 2 == 0: # % variable returns the remainder of division # use double equal signs when determining if a value is equal to another value return True if x % 2 != 0: # the != means not equal to return False #printing the values outputted by the function multiple times print(IsEven(24)) print(IsEven(7)) print(IsEven(19)) print(IsEven(30)) .",
            "url": "https://dillonlee06.github.io/ZestyYeungsReborn//ZestyYeungsReborn/jupyter/week%2013/2022/11/27/Variable-Assignment.html",
            "relUrl": "/jupyter/week%2013/2022/11/27/Variable-Assignment.html",
            "date": " • Nov 27, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "The points for the homework",
            "content": "Points for hacks (3 points) . 2.5/3 for trying and it is visible that the code segment made works somewhat | 3/3 for completion and the code segment works | more than 2.5 if code segment is very close to completion | . How to submit Homework . Copy the list from the homework page, Challenge and Homework, that contains the albums and songs. Make sure not to copy the challenge list | . | Paste the list into your individual Fastpages | Edit the code so that the desired output is given | Once everything is done, click on this link, which will take you to an issue on our repo. Comment the link to your homework post along with your full name. | .",
            "url": "https://dillonlee06.github.io/ZestyYeungsReborn//ZestyYeungsReborn/markdown/week%205/2022/11/27/Points.html",
            "relUrl": "/markdown/week%205/2022/11/27/Points.html",
            "date": " • Nov 27, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Data Abstraction JS",
            "content": "In the following code segment we will: | declare a function | input and store data | display it | . function Player(name, position, average) { // make a function this.name = name; // different categories this.position = position; this.average = average; this.role = &quot;&quot;; } Player.prototype.setRole = function(role) { // whatever input we put into roles, it will be stored. this.role = role; } Player.prototype.toJSON = function() { const obj = {name: this.name, position: this.position, average: this.average, role: this.role}; const json = JSON.stringify(obj); return json; } var manager = new Player(&quot;Bob Melvin&quot;, &quot;Catcher&quot;, &quot;.233&quot;); // new player, including all the categories LogItType(manager); LogItType(manager.toJSON()); manager.setRole(&quot;Manager&quot;); LogItType(manager); LogItType(manager.toJSON()); . object ; Player { name: &#39;Bob Melvin&#39;, position: &#39;Catcher&#39;, average: &#39;.233&#39;, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Bob Melvin&#34;,&#34;position&#34;:&#34;Catcher&#34;,&#34;average&#34;:&#34;.233&#34;,&#34;role&#34;:&#34;&#34;} object ; Player { name: &#39;Bob Melvin&#39;, position: &#39;Catcher&#39;, average: &#39;.233&#39;, role: &#39;Manager&#39; } string ; {&#34;name&#34;:&#34;Bob Melvin&#34;,&#34;position&#34;:&#34;Catcher&#34;,&#34;average&#34;:&#34;.233&#34;,&#34;role&#34;:&#34;Manager&#34;} . var players = [ // make a list, storing all the categories we had in the previous code segment. new Player(&quot;Manny Machado&quot;, &quot;Third Base&quot;, &quot;.299&quot;), new Player(&quot;Trent Grisham&quot;, &quot;Center Field&quot;, &quot;.185&quot;), new Player(&quot;Jake Cronenworth&quot;, &quot;Second Base&quot;, &quot;.238&quot;), new Player(&quot;Jurickson Profar&quot;, &quot;Left Field&quot;, &quot;.240&quot;), new Player(&quot;Ha-Seong Kim&quot;, &quot;Shortstop&quot;, &quot;.252&quot;), new Player(&quot;Brandon Drury&quot;, &quot;First Base&quot;, &quot;.226&quot;), new Player(&quot;Jorge Alfaro&quot;, &quot;Catcher&quot;, &quot;.249&quot;), new Player(&quot;Wil Myers&quot;, &quot;Right Field, First Base&quot;, &quot;.255&quot;), new Player(&quot;Juan Soto&quot;, &quot;Right Field&quot;, &quot;.242&quot;), new Player(&quot;Austin Nola&quot;, &quot;Catcher&quot;, &quot;.248&quot;), new Player(&quot;Josh Bell&quot;, &quot;Designated Hitter, First Base&quot;, &quot;.191&quot;), new Player(&quot;Jose Azocar&quot;, &quot;Outfield&quot;, &quot;.272&quot;), ]; function Padres(manager, players){ // new function in order to store the data manager.setRole(&quot;Manager&quot;); this.manager = manager; this.padres = [manager]; this.players = players; this.players.forEach(player =&gt; { player.setRole(&quot;Player&quot;); this.padres.push(player); }); this.json = []; this.padres.forEach(player =&gt; this.json.push(player.toJSON())); } sd2022 = new Padres(manager, players); // this is how we will display it. LogItType(sd2022.padres); LogItType(sd2022.padres[0].name); LogItType(sd2022.json[0]); LogItType(JSON.parse(sd2022.json[0])); . object ; [ Player { name: &#39;Bob Melvin&#39;, position: &#39;Catcher&#39;, average: &#39;.233&#39;, role: &#39;Manager&#39; }, Player { name: &#39;Manny Machado&#39;, position: &#39;Third Base&#39;, average: &#39;.299&#39;, role: &#39;Player&#39; }, Player { name: &#39;Trent Grisham&#39;, position: &#39;Center Field&#39;, average: &#39;.185&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jake Cronenworth&#39;, position: &#39;Second Base&#39;, average: &#39;.238&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jurickson Profar&#39;, position: &#39;Left Field&#39;, average: &#39;.240&#39;, role: &#39;Player&#39; }, Player { name: &#39;Ha-Seong Kim&#39;, position: &#39;Shortstop&#39;, average: &#39;.252&#39;, role: &#39;Player&#39; }, Player { name: &#39;Brandon Drury&#39;, position: &#39;First Base&#39;, average: &#39;.226&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jorge Alfaro&#39;, position: &#39;Catcher&#39;, average: &#39;.249&#39;, role: &#39;Player&#39; }, Player { name: &#39;Wil Myers&#39;, position: &#39;Right Field, First Base&#39;, average: &#39;.255&#39;, role: &#39;Player&#39; }, Player { name: &#39;Juan Soto&#39;, position: &#39;Right Field&#39;, average: &#39;.242&#39;, role: &#39;Player&#39; }, Player { name: &#39;Austin Nola&#39;, position: &#39;Catcher&#39;, average: &#39;.248&#39;, role: &#39;Player&#39; }, Player { name: &#39;Josh Bell&#39;, position: &#39;Designated Hitter, First Base&#39;, average: &#39;.191&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jose Azocar&#39;, position: &#39;Outfield&#39;, average: &#39;.272&#39;, role: &#39;Player&#39; } ] string ; Bob Melvin string ; {&#34;name&#34;:&#34;Bob Melvin&#34;,&#34;position&#34;:&#34;Catcher&#34;,&#34;average&#34;:&#34;.233&#34;,&#34;role&#34;:&#34;Manager&#34;} object ; { name: &#39;Bob Melvin&#39;, position: &#39;Catcher&#39;, average: &#39;.233&#39;, role: &#39;Manager&#39; } . Padres.prototype._toHtml = function() { // display data in a table var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // set up the table var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Position&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Batting Average&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // include the data in the table according to categories. for (var row of sd2022.padres) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.position + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.average + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } // html format return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(sd2022._toHtml()); . NamePositionBatting AverageRole . Bob Melvin | Catcher | .233 | Manager | Manny Machado | Third Base | .299 | Player | Trent Grisham | Center Field | .185 | Player | Jake Cronenworth | Second Base | .238 | Player | Jurickson Profar | Left Field | .240 | Player | Ha-Seong Kim | Shortstop | .252 | Player | Brandon Drury | First Base | .226 | Player | Jorge Alfaro | Catcher | .249 | Player | Wil Myers | Right Field, First Base | .255 | Player | Juan Soto | Right Field | .242 | Player | Austin Nola | Catcher | .248 | Player | Josh Bell | Designated Hitter, First Base | .191 | Player | Jose Azocar | Outfield | .272 | Player | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . . . .",
            "url": "https://dillonlee06.github.io/ZestyYeungsReborn//ZestyYeungsReborn/week-1/2022/11/27/Data-Abstraction-js.html",
            "relUrl": "/week-1/2022/11/27/Data-Abstraction-js.html",
            "date": " • Nov 27, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Challenge and Homework",
            "content": "Challenge . The list given contains multiple numbers with different values. There are also 2 variables that define the minimum and maximum valid values. Given these variables, output the values that do not fit into the valid range as well as their index values. . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] # list of the different numerical values min_valid = 100 # minimum value max_valid = 200 # maximum value . 9 306 6 5 4 308 2 4 . Homework/Hacks . The list given contains 4 album names - Welcome to my Nightmare, Bad Company, Nightflight, More Mayhem - and each album contains at least 4 songs within another list. Given this, write a block of code that enables users to input in integer values that correspond to the albums and songs - Welcome to my Nightmare is 1, Bad Company is 2, etc. - Then, a sentence is outputted that says Playing ___ based on which song was chosen using the numbers inputted by the user that corresponds to each song. . albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ), ] . 1 1 Playing &quot;Welcome to my Nightmare&quot; 2 2 Playing &quot;Rock Steady&quot; .",
            "url": "https://dillonlee06.github.io/ZestyYeungsReborn//ZestyYeungsReborn/jupyter/week%2013/2022/11/27/Challenge-and-Homework.html",
            "relUrl": "/jupyter/week%2013/2022/11/27/Challenge-and-Homework.html",
            "date": " • Nov 27, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Data Abstraction in Python",
            "content": "Data Abstraction . Data abstraction provides a seperation between the abstract properties of a data ype and the concrete details of its representation | data abstractions manage complexity in programs by giving a collection of data a name without refrencing the specific etails of the representation | Data Abstraction makes it easier to implement, develop and maintain code easier | The ue of lists allows for multiple related values to be treated as a single value | In AP exam the index values for lists start rom 1 and not 0 like in python. | . python . Using simple lists and working with variables . Lists are a powerful tool that can be used to organise, maintain and develoop related data | For example - A list of students in a class, if there was no list we would assign a variable to each student but if the data was in a list everyone would be under one variable. If a student left the class or was added instead of deleting entire variable we can edit the previous list. | this helps organize data and make less mistakes | . shopping_list = [&quot;milk&quot;, &quot;pasta&quot;, &quot;eggs&quot;, &quot;spam&quot;, &quot;bread&quot;, &quot;rice&quot; ] # list syntax is &quot;[]&quot; another_list = shopping_list print(id(shopping_list)) # each object has a uniques id; the id() function returns this id for the specifies object print(id(another_list)) # As shopping_list is attritibuted to another_list, the id for both are the same as the object in questiom does not change print(another_list) shopping_list += [&quot;cookies&quot;] # adding cookies to the list print(shopping_list) print(id(shopping_list)) # the id does not change print(another_list) a = b = c = d = e = f = another_list # it is possibe to atrribute the same object to various variables print(a) print(&quot;Adding cream&quot;) # .append() is a function which can be used to place new items into old lists b.append(&quot;cream&quot;) # changes in one of the variables chnges all the lists in other as the object in question is the same. print(a) print(c) print(d) . 140505053381696 140505053381696 [&#39;milk&#39;, &#39;pasta&#39;, &#39;eggs&#39;, &#39;spam&#39;, &#39;bread&#39;, &#39;rice&#39;] [&#39;milk&#39;, &#39;pasta&#39;, &#39;eggs&#39;, &#39;spam&#39;, &#39;bread&#39;, &#39;rice&#39;, &#39;cookies&#39;] 140505053381696 [&#39;milk&#39;, &#39;pasta&#39;, &#39;eggs&#39;, &#39;spam&#39;, &#39;bread&#39;, &#39;rice&#39;, &#39;cookies&#39;] [&#39;milk&#39;, &#39;pasta&#39;, &#39;eggs&#39;, &#39;spam&#39;, &#39;bread&#39;, &#39;rice&#39;, &#39;cookies&#39;] Adding cream [&#39;milk&#39;, &#39;pasta&#39;, &#39;eggs&#39;, &#39;spam&#39;, &#39;bread&#39;, &#39;rice&#39;, &#39;cookies&#39;, &#39;cream&#39;] [&#39;milk&#39;, &#39;pasta&#39;, &#39;eggs&#39;, &#39;spam&#39;, &#39;bread&#39;, &#39;rice&#39;, &#39;cookies&#39;, &#39;cream&#39;] [&#39;milk&#39;, &#39;pasta&#39;, &#39;eggs&#39;, &#39;spam&#39;, &#39;bread&#39;, &#39;rice&#39;, &#39;cookies&#39;, &#39;cream&#39;] . Breaking lists into more lists . A list of data can be further segregated using more similar characteristics in the data | For example, the code segement below segregates the data given into 2 new lists. One that one contains plants and one that contains only shrubs. | . data = [ &quot;Andromeda - Shrub&quot;, &quot;Bellflower - Flower&quot;, &quot;China Pink - Flower&quot;, &quot;Daffodil - Flower&quot;, &quot;Evening Primrose - Flower&quot;, &quot;French Marigold - Flower&quot;, &quot;Hydrangea - Shrub&quot;, &quot;Iris - Flower&quot;, &quot;Japanese Camellia - Shrub&quot;, &quot;Lavender - Shrub&quot;, &quot;Lilac - Shrub&quot;, &quot;Magnolia - Shrub&quot;, &quot;Peony - Shrub&quot;, &quot;Queen Anne&#39;s Lace - Flower&quot;, &quot;Red Hot Poker - Flower&quot;, &quot;Snapdragon - Flower&quot;, &quot;Sunflower - Flower&quot;, &quot;Tiger Lily - Flower&quot;, &quot;Witch Hazel - Shrub&quot;, ] # two empty lists flowers = [] shrubs = [] for plant in data: # A for loop that goes through each item in the list if &quot;Flower&quot; in plant: flowers.append(plant) # executed if &quot;flowers&quot; is in the item elif &quot;Flower&quot; not in plant: shrubs.append(plant) # executed if &quot;shrubs&quot; is in the item print(&quot;Shrubs {}&quot;.format(shrubs)) # The format() method formats the specified value(s) and insert them inside the string&#39;s placeholder. The placeholder is defined using curly brackets: {} print(&quot;Flowers {}&quot;.format(flowers)) . Shrubs [&#39;Andromeda - Shrub&#39;, &#39;Hydrangea - Shrub&#39;, &#39;Japanese Camellia - Shrub&#39;, &#39;Lavender - Shrub&#39;, &#39;Lilac - Shrub&#39;, &#39;Magnolia - Shrub&#39;, &#39;Peony - Shrub&#39;, &#39;Witch Hazel - Shrub&#39;] Flowers [&#39;Bellflower - Flower&#39;, &#39;China Pink - Flower&#39;, &#39;Daffodil - Flower&#39;, &#39;Evening Primrose - Flower&#39;, &#39;French Marigold - Flower&#39;, &#39;Iris - Flower&#39;, &#34;Queen Anne&#39;s Lace - Flower&#34;, &#39;Red Hot Poker - Flower&#39;, &#39;Snapdragon - Flower&#39;, &#39;Sunflower - Flower&#39;, &#39;Tiger Lily - Flower&#39;] . Organising diffrent items in the lists . individual elements can be called, seprated and organised using for loops | . albums = [(&quot;Welcome to my nightmare&quot;, &quot;Alice cooper&quot;, 1975), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981), (&quot;More Mayhem&quot;, &quot;Emilda May&quot;, 2011), (&quot;Ride the Lightning&quot;, &quot;Metallica&quot;, 1984), ] print(len(albums)) # number of items in the list for name, artist, year in albums: print(&quot;Album: {}, Artist: {}, year: {}&quot; .format(name, artist, year)) # returns a segregated and labled presentation of the songs . 5 Album: Welcome to my nightmare, Artist: Alice cooper, year: 1975 Album: Bad Company, Artist: Bad Company, year: 1974 Album: Nightflight, Artist: Budgie, year: 1981 Album: More Mayhem, Artist: Emilda May, year: 2011 Album: Ride the Lightning, Artist: Metallica, year: 1984 . Splitting and joining lists and data inside them . The split() method splits a string into a list. You can specify the separator, default separator is any whitespace. | The join() method takes all items in an iterable and joins them into one string. A string must be specified as the separator. | . panagram = &quot;&quot;&quot;the quick brown fox jumps tover the lazy dog&quot;&quot;&quot; words = panagram.split() # splitting the string above into individual words. Seperator here is any whitespace. print(words) numbers = &quot;9,223,372,036,854,775,807&quot; print(numbers.split(&quot;,&quot;)) # seprator is &quot;,&quot; generated_list = [&#39;9&#39;, &#39; &#39;, &#39;2&#39;, &#39;2&#39;, &#39;3&#39;, &#39; &#39;, &#39;3&#39;, &#39;7&#39;, &#39;2&#39;, &#39; &#39;, &#39;0&#39;, &#39;3&#39;, &#39;6&#39;, &#39; &#39;, &#39;8&#39;, &#39;5&#39;, &#39;4&#39;, &#39; &#39;, &#39;7&#39;, &#39;7&#39;, &#39;5&#39;, &#39; &#39;, &#39;8&#39;, &#39;0&#39;, &#39;7&#39;, &#39; &#39;, ] values = &quot;&quot;.join(generated_list) # converting the list into a string print(values) values_list = values.split() # seperator is any whitespace print(values_list) . [&#39;the&#39;, &#39;quick&#39;, &#39;brown&#39;, &#39;fox&#39;, &#39;jumps&#39;, &#39;over&#39;, &#39;the&#39;, &#39;lazy&#39;, &#39;dog&#39;] [&#39;9&#39;, &#39;223&#39;, &#39;372&#39;, &#39;036&#39;, &#39;854&#39;, &#39;775&#39;, &#39;807&#39;] 9 223 372 036 854 775 807 [&#39;9&#39;, &#39;223&#39;, &#39;372&#39;, &#39;036&#39;, &#39;854&#39;, &#39;775&#39;, &#39;807&#39;] .",
            "url": "https://dillonlee06.github.io/ZestyYeungsReborn//ZestyYeungsReborn/week-1/2022/11/26/final-lesson-plan.html",
            "relUrl": "/week-1/2022/11/26/final-lesson-plan.html",
            "date": " • Nov 26, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 3.1 and 3.2 Overview",
            "content": "Unit 3.1 Variables and Assignments . Key Points . Variables are abstractions within programs which represent a value | Values can be individual data points or a list/collection that contains many data values | Types of data: numbers, Booleans (T/F), lists, and strings | Python | JavaScript | . Unit 3.2 Data Abstraction . Key Points . A list is made up of elements organized in a specific order | An element is a unique, individual value in a list | A string differs from a list as it is a sequence of characters rather than elements | Data abstraction uses a list by taking specific data elements from a list and organizing into a whole, less complex representation of the values such as a table | Python | JavaScript | .",
            "url": "https://dillonlee06.github.io/ZestyYeungsReborn//ZestyYeungsReborn/ap%20notes/2022/11/23/Unit-3.1-3.2-Overview.html",
            "relUrl": "/ap%20notes/2022/11/23/Unit-3.1-3.2-Overview.html",
            "date": " • Nov 23, 2022"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://dillonlee06.github.io/ZestyYeungsReborn//ZestyYeungsReborn/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dillonlee06.github.io/ZestyYeungsReborn//ZestyYeungsReborn/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}