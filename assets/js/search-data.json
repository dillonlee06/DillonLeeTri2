{
  
    
        "post0": {
            "title": "Lesson Plan",
            "content": "Python . To define a variable in python, just type in the variable name - one word - and use the = sign to set it equal to it&#39;s value. A variable can be defined using numbers, string, list, or boolean. Strings must have quotations around it and lists must be surrounded by square brackets. Once you have defined a variable, you can do many functions and conditions with it, including the print() statement. . #defining all the variables using the equal sign numbervariable = 25 stringvariable = &quot;word&quot; numberlist = [1, 2, 3, 4, 5] stringlist = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;] israining = False #printing all the defined variables print(numbervariable) print(stringvariable) print(numberlist) print(stringlist) print(israining) . Once a variable is defined using a numerical value, mathematical expressions can also be performed on the variable. . number = 5 #defining the variable number x = number * 2 #defining a variable by using another variable print(number*2) # multiplying a variable by 2 print(x) . Once a list is defined, many functions can be performed, such as the append() function. . list = [] list.append(&quot;cookies&quot;) # appending a value to a defined list print(list) . A dictionary can also be defined using curly brackets and the equal sign. To input keys and values into a dictionary, you have to use a slightly different approach than lists. . mydict = {&quot;ice cream&quot;:&quot;dairy&quot;} # defining dictionary using curly brackets mydict[&quot;banana&quot;] = &quot;fruit&quot; #add keys and values to a dict by setting a value equal to a key, like shown mydict[&quot;ice cream&quot;] = &quot;dessert&quot; #editing a value inside the dictionary print(mydict) . You can also interchange variables by using a temporary variable. In the code below, temp is the temporary variables, and var 1 and var 2 will have their values swapped. This code also works with integers, not just strings. . var1 = &quot;word&quot; # defining first variable var2 = &quot;number&quot; # defining second variable temp = var1 # defining temporary variable using the first variable var1 = var2 # changing the first variable value as the second variable value var2 = temp # changing the second variable value to the first variable value . Variables can also be defined using float data types, instead of just int types, but are used the exact same way. The same mathematical functions also apply. . number = 20.3 #defining a variable usinbg float x = number/10 #defining second variable y = number*2 # defining third variable print(number) # printing first variable print(x) #printing second variable print(y) # printing third variable print(x*y) #printing the second and third variables multiplied . The function below takes in a parameter, x, and determines if x is even or odd. Variables can be used within functions to perform a certain task, which in this case, is to determine even or odd. To define a function, use the variable def and use a colon. Make sure there are parenthesis next to the function name, even if the function doesn&#39;t tkae in any parameters. . def IsEven(x): # define the function if x % 2 == 0: # % variable returns the remainder of division # use double equal signs when determining if a value is equal to another value return True if x % 2 != 0: # the != means not equal to return False #printing the values outputted by the function multiple times print(IsEven(24)) print(IsEven(7)) print(IsEven(19)) print(IsEven(30)) .",
            "url": "https://dillonlee06.github.io/ZestyYeungsReborn//ZestyYeungsReborn/jupyter/week%2013/2022/11/27/Variable-Assignment.html",
            "relUrl": "/jupyter/week%2013/2022/11/27/Variable-Assignment.html",
            "date": " • Nov 27, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Microsoft Word Example Post",
            "content": "When writing a blog post with Microsoft Word – the filename becomes the title. In this case the file name is “2020-01-01-Microsoft-Word-Example-Post.docx”. . There is minimal support for Word documents in fastpages compared to Jupyter notebooks. Some known limitations: . alt text in Word documents are not yet supported by fastpages, and will break links to images. . | You can only specify front matter for Word documents globally. See the README for more details. . | . For greater control over the content produced from Word documents, you will need to convert Word to markdown files manually. You can follow the steps in this blog post, which walk you through how to use pandoc to do the conversion. Note: If you wish to customize your Word generated blog post in markdown, make sure you delete your Word document from the _word directory so your markdown file doesn’t get overwritten! . If your primary method of writing blog posts is Word documents, and you plan on always manually editing Word generated markdown files, you are probably better off using fast_template instead of fastpages. . The material below is a reproduction of this blog post, and serves as an illustrative example. . Maintaining a healthy open source project can entail a huge amount of toil. Popular projects often have orders of magnitude more users and episodic contributors opening issues and PRs than core maintainers capable of handling these issues. . Consider this graphic prepared by the NumFOCUS foundation showing the number of maintainers for three widely used scientific computing projects: . . We can see that across these three projects, there is a very low ratio maintainers to users. Fixing this problem is not an easy task and likely requires innovative solutions to address the economics as well as tools. . Due to its recent momentum and popularity, Kubeflow suffers from a similar fate as illustrated by the growth of new issues opened: . . Source: “TensorFlow World 2019, Automating Your Developer Workflow With ML” . Coincidentally, while building out end to end machine learning examples for Kubeflow, we built two examples using publicly available GitHub data: GitHub Issue Summarization and Code Search. While these tutorials were useful for demonstrating components of Kubeflow, we realized that we could take this a step further and build concrete data products that reduce toil for maintainers. . This is why we started the project kubeflow/code-intelligence, with the goals of increasing project velocity and health using data driven tools. Below are two projects we are currently experimenting with : . Issue Label Bot: This is a bot that automatically labels GitHub issues using Machine Learning. This bot is a GitHub App that was originally built for Kubeflow but is now also used by several large open source projects. The current version of this bot only applies a very limited set of labels, however we are currently A/B testing new models that allow personalized labels. Here is a blog post discussing this project in more detail. . | Issue Triage GitHub Action: to compliment the Issue Label Bot, we created a GitHub Action that automatically adds / removes Issues to the Kubeflow project board tracking issues needing triage. . | Together these projects allow us to reduce the toil of triaging issues. The GitHub Action makes it much easier for the Kubeflow maintainers to track issues needing triage. With the label bot we have taken the first steps in using ML to replace human intervention. We plan on using features extracted by ML to automate more steps in the triage process to further reduce toil. . Building Solutions with GitHub Actions . One of the premises of Kubeflow is that a barrier to building data driven, ML powered solutions is getting models into production and integrated into a solution. In the case of building models to improve OSS project health, that often means integrating with GitHub where the project is hosted. . We are really excited by GitHub’s newly released feature GitHub Actions because we think it will make integrating ML with GitHub much easier. . For simple scripts, like the issue triage script, GitHub actions make it easy to automate executing the script in response to GitHub events without having to build and host a GitHub app. . To automate adding/removing issues needing triage to a Kanban board we wrote a simple python script that interfaces with GitHub’s GraphQL API to modify issues. . As we continue to iterate on ML Models to further reduce toil, GitHub Actions will make it easy to leverage Kubeflow to put our models into production faster. A number of prebuilt GitHub Actions make it easy to create Kubernetes resources in response to GitHub events. For example, we have created GitHub Actions to launch Argo Workflows. This means once we have a Kubernetes job or workflow to perform inference we can easily integrate the model with GitHub and have the full power of Kubeflow and Kubernetes (eg. GPUs). We expect this will allow us to iterate much faster compared to building and maintaining GitHub Apps. . Call To Action . We have a lot more work to do in order to achieve our goal of reducing the amount of toil involved in maintaining OSS projects. If your interested in helping out here’s a couple of issues to get started: . Help us create reports that pull and visualize key performance indicators (KPI). https://github.com/kubeflow/code-intelligence/issues/71 . We have defined our KPI here: issue #19 | . | Combine repo specific and non-repo specific label predictions: https://github.com/kubeflow/code-intelligence/issues/70 . | . In addition to the aforementioned issues we welcome contributions for these other issues in our repo. .",
            "url": "https://dillonlee06.github.io/ZestyYeungsReborn//ZestyYeungsReborn/2020/01/01/Microsoft-Word-Example-Post.html",
            "relUrl": "/2020/01/01/Microsoft-Word-Example-Post.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://dillonlee06.github.io/ZestyYeungsReborn//ZestyYeungsReborn/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dillonlee06.github.io/ZestyYeungsReborn//ZestyYeungsReborn/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}